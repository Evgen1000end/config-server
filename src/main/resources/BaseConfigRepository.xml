<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.demkin.esb.configserver.repository.BaseConfigRepository">

  <insert id="saveConfig">
    INSERT INTO postgres.public.configs (is_admin, uri, label, username, group_id, groupuri, value)
    values (#{isAdmin}, #{description.uri}, #{description.label}, #{username}, #{groupId}, #{groupUrl}, '{}')

  </insert>

  <update id="updateConfig">
    UPDATE
      postgres.public.configs
    SET is_admin = #{isAdmin},
        uri      = #{description.uri},
        label    = #{description.label}
    WHERE ((is_admin = #{isAdmin} and username is null) or username = #{username})
      AND uri = #{uri}
  </update>

  <update id="updateConfigValue">
    UPDATE
      postgres.public.configs
    SET is_admin = #{isAdmin},
        uri      = #{uri},
        value    = #{config}
    WHERE ((is_admin = #{isAdmin} and username is null) or username = #{username})
      AND uri = #{uri}
  </update>

  <select id="findConfig" resultType="java.lang.String">
    SELECT value
    FROM postgres.public.configs
    WHERE (is_admin = #{isAdmin} and username is null)
       or username = #{username}
    ORDER BY created_at DESC
  </select>

  <select id="findConfigByUrl" resultType="java.lang.String">
    SELECT value
    FROM postgres.public.configs
    WHERE ((is_admin = #{isAdmin} and username is null) or username = #{username})
      AND uri = #{uri}
    ORDER BY created_at DESC
  </select>


  <!--  Методы поиска-->
  <select id="findMeta" resultType="ru.demkin.esb.configserver.model.ConfigurationMetaResponse">
    SELECT *
    FROM postgres.public.configs
    WHERE (is_admin = #{isAdmin} and username is null)
       or username = #{username}
    ORDER BY created_at DESC
  </select>

  <select id="findMetaByUrl" resultType="ru.demkin.esb.configserver.model.ConfigurationMetaResponse">
    SELECT *
    FROM postgres.public.configs
    WHERE ((is_admin = #{isAdmin} and username is null) or username = #{username})
      AND uri = #{uri}
    ORDER BY created_at DESC
  </select>

  <delete id="deleteConfig">
    DELETE
    FROM postgres.public.configs
    WHERE ((is_admin = #{isAdmin} and username is null) or username = #{username})
      AND uri = #{uri};
  </delete>

  <delete id="deleteConfigByUri">
    DELETE
    FROM postgres.public.configs
    WHERE uri = #{uri};
  </delete>

  <delete id="deleteConfigByUri2">
    DELETE
    FROM postgres.public.configs
    WHERE uri = #{uri}
      AND is_admin = false;
  </delete>

<!--  Операция работы с группами-->

  <insert id="saveGroup">
    INSERT INTO postgres.public.groups (uri, label)
    values (#{groups.uri}, #{groups.label})

  </insert>

  <update id="updateGroup">
    UPDATE
      postgres.public.groups
    SET   label = #{groups.label}
    WHERE uri = #{uri}
  </update>

  <!--  Методы поиска-->
  <select id="findGroups" resultType="ru.demkin.esb.configserver.model.GroupResponse">
    SELECT
      id, uri, label
    FROM
        postgres.public.groups
    ORDER BY created_at DESC
  </select>

  <select id="findGroupByUrl" resultType="ru.demkin.esb.configserver.model.GroupResponse">
    SELECT
      id, uri, label
    FROM
      postgres.public.groups
    WHERE
        uri = #{uri}
    ORDER BY created_at DESC
  </select>

  <delete id="deleteGroup">
    DELETE
    FROM postgres.public.groups
    WHERE uri = #{uri};
  </delete>

</mapper>
